<Panel ux:Class="CreateUser" Background="#18f" >

    <Router ux:Dependency="router" />
   
    <Rectangle ux:Class="HorizontalLine" Color="#ffffff80"  Height="1" />
    <TextInput Font="LatoLight" ux:Class="WhiteTextInput" Alignment="Center" TextColor="White" Margin="10" PlaceholderColor="#ffffff80" />
    <JavaScript>
    var Observable = require("FuseJS/Observable");
    var Context = require("Modules/Context")
    var Storage = require("FuseJS/Storage")
    var username = Observable();
    var password = Observable();
    var email = Observable();
    var name = Observable();
    var errValue = Observable();
    var message = Observable();

    var userChannel = Context.socket.channel("user:lobby")
    userChannel.join()
      .receive("ok", function(resp) {
        console.log("Joined user channel")
      })
      .receive("error", function(resp) {

      })

      function goBack() {
        errValue.value = ""
        message.value = ""
        username.value=""
        password.value=""
        email.value = ""
        name.value = ""
        router.goBack()
      }

      function createUser() {
        if (!email.value || !username.value || !password.value || !name.value) {
          errValue.value = "must supply all fields";
          return;
        }
       
       isBusy.activate();
        errValue.value = '';

       userChannel.push("create:user", {
            user: {name: name.value, email: email.value, username: username.value, password: password.value}}).
          receive("ok", function(resp) {
            isBusy.deactivate();
          }).
          receive("error", function(resp) {
            console.log("User already exist")
            isBusy.deactivate();
            errValue.value = resp.errors
            username.value=""
            password.value=""
            email.value = ""
            name.value = ""
          })

      userChannel.on("create:user", function(resp) {
          isBusy.deactivate();
          name.value = ""
          username.value=""
          password.value=""
          email.value = ""
          errValue.value = ""
          message.value = "Success. Please check your email and verify your account"
      })
         /*
          Context.accessToken.value = data.data[0].access_token
          var storeObject = {accessToken: data.data[0].access_token}
          Storage.write(Context.SAVENAME, JSON.stringify(storeObject)).then(function(content) {
            if (content !== '') {
              Context.isLoggedIn.value = true
            }
          });
          Context.getProducts(task, Context.accessToken.value)
          router.push("home")
          */
        
      }

      module.exports = {goBack, errValue, message, createUser, email, username,  password, name}

    </JavaScript>
    
    <DockPanel>
      <DockPanel Dock="Top" Color="#18f" >
        <StatusBarBackground Dock="Top" />
        <Panel Height="48">
          <Text Color="White" Value="Create User" Alignment="Center" FontSize="20" />

          <Image File="../Assets/arrow.png" Alignment="Left" Clicked="{goBack}" />
        </Panel>
      </DockPanel>


      <StackPanel Alignment="Top" Margin="20" ux:Name="createBar" >
        <Busy ux:Name="isBusy" IsActive="false"/>
        <Text Font="LatoLight" TextWrapping="Wrap" TextColor="Red" Value="{message}" Alignment="Center" />
        <Text Font="LatoLight" TextWrapping="Wrap" TextColor="Red" Value="{errValue}" Alignment="Center" />
        <WhiteTextInput PlaceholderText="name" Value="{name}" />
        <HorizontalLine />
      <WhiteTextInput PlaceholderText="Username" Value="{username}" />
        <HorizontalLine />
        <WhiteTextInput PlaceholderText="Email"  Value="{email}" />
        <HorizontalLine />
        <WhiteTextInput PlaceholderText="Password" IsPassword="true" Value="{password}" />
        <HorizontalLine />
        <Panel Alignment="VerticalCenter" >
          <Rectangle Clicked="{createUser}" CornerRadius="80" Fill="#127799" Width="100" Height="40" Margin="10,50" >
            <Text Font="LatoRegular" TextColor="#ffffff" Alignment="Center">Sign Up</Text>
          </Rectangle>
        </Panel>
      </StackPanel>

       <WhileBusy>
      <Change loadingPanel.Opacity="1" Duration=".4" />
      <Change createBar.Opacity="0" Duration=".4" />
    </WhileBusy>
    <MyLoadingIndicator ux:Name="loadingPanel" Opacity="0" ThemeColor="#fff" />

    </DockPanel>

</Panel>
